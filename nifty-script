#!/bin/bash

# If any single line of this script fails, we want to exit and have
# Travis notice that as a test failure.
set -e

NIFTY_GIT_CONFIG_EMAIL=${NIFTY_GIT_CONFIG_EMAIL:=carl.worth+travis@nimbisservices.com}
NIFTY_TRAVIS_JOBS_URL_BASE=https://magnum.travis-ci.com/${TRAVIS_REPO_SLUG}/jobs
NIFTY_TRAVIS_JOB_URL=${NIFTY_TRAVIS_JOBS_URL_BASE}/${TRAVIS_JOB_ID}
NIFTY_TRAVIS_CACHE_DIR=${HOME}/.travis-cache
# This should be set by the .travis.yml file if the value needs to change,
# like when using a public cache repository.
NIFTY_TRAVIS_CACHE_REPO=${NIFTY_TRAVIS_CACHE_REPO:=git@github.com:nimbis/travis-cache}

# Primary key for travis cache. For this we use the TRAVIS_REPO_SLUG
# and then append the value of $SITE (if set) since we do multiple
# tests for different sites within the same repository.
CACHE_REPO_KEY=${TRAVIS_REPO_SLUG}${SITE:+-}${SITE}

# Absolute path for original clone of repository (so always easy to return to)
SITE_DIR=$(pwd)

reqs_and_decrypt="false"

#####
# At various times, Travis needs to create new git objects, (commits
# within the travis-cache repository, tags after deploying to
# production).
#
# In order to do that, git insists that the user have a valid
# name. So we need to put something in place.
#
# In lieu of any better information, I'll use my email address to take
# responsibility for any actions performed by this script.
#####

__configure_git_authorship() {
    git config user.email "${NIFTY_GIT_CONFIG_EMAIL}"
    git config user.name "${TRAVIS_REPO_SLUG} travis-metadata-script"
}

#####
# Initialize our git-repository-based travis cache.
#
# This function must be called once before any other calls to
# travis_cache functions.
#####

__init_travis_cache() {
    if [ ! -e ${NIFTY_TRAVIS_CACHE_DIR} ]; then
       git clone ${NIFTY_TRAVIS_CACHE_REPO} ${NIFTY_TRAVIS_CACHE_DIR}
    fi

    cd ${NIFTY_TRAVIS_CACHE_DIR}
    # Switch to an absolute path for NIFTY_TRAVIS_CACHE_DIR for better reliability
    NIFTY_TRAVIS_CACHE_DIR=$(pwd)

    git pull --no-edit
    git reset --hard origin/master

    __configure_git_authorship

    cd ${SITE_DIR}
}

#####
# String together all function arguments. For any very long
# arguments, (that is, git commit IDs), split them into two pieces
# after the first two characters.
#####
__args_to_cache_path() {
    path=""

    while [ $# -gt 0 ]; do
    arg=$1
    shift
    if [ ${#arg} -gt 35 ]; then
        arg="${arg:0:2}/${arg:2}"
    fi
    path="${path:+$path/}$arg"
    done

    echo "$path"
}

#####
# Perform a lookup in our git-repository-based travis cache.
#
# This function prints a non-empty string on a cache hit, (which can
# be provided to the user as a URL to see the log from the previous
# Travis run).
#####
__check_travis_cache() {

    cd ${NIFTY_TRAVIS_CACHE_DIR}

    path=$(__args_to_cache_path "$@")

    if [ -e "$path" ]; then
       cat "$path"
    fi

    cd ${SITE_DIR}
}

#####
# Store an item in the travis cache
#
# The first argument should be a URL to store in the cache. All
# remaining arguments are the key, (and should match the arguments
# used later when calling __check_travis_cache).
#####
__store_travis_cache() {

    cd ${NIFTY_TRAVIS_CACHE_DIR}

    item="$1"
    shift

    echo "travis_fold:start:__store_travis_cache_$1"

    path=$(__args_to_cache_path "$@")

    mkdir -p $(dirname "$path")

    echo "$item" > "$path"

    git add "$path"
    git commit -a -m "Add item to travis cache" -m "Path of $path" -m "Item of $item"

    # If the first push fails, pull then push again. If that fails too, give up.
    git push origin master || git pull --no-edit && git push origin master || true

    cd ${SITE_DIR}

    echo "travis_fold:end:__store_travis_cache_$1"
}

#####
# Initialize all common and required aspects of the nifty environment,
# (git-based cache for travis test results, latest version of pip,
# Xvfb server running, etc.)
#####
__init_nifty_environment() {

    __init_travis_cache

    # Upgrade to latest pip
    #
    # Travis has pip 6.0.7 installed by default, which does not know how
    # to install a local version of a package (such as
    # django-shop==0.2.0+nimbis.1).
    pip install --upgrade pip


    # Upgrade to latest setuptools
    #
    # Travis has setuptools 12.0.5 installed by default, which does
    # have the support for environment markers that exists in v20.10.0
    # and later. This functionality is necessary when installing some
    # packages, such as html5lib v0.999999999 and django-shop v0.9.3
    pip install --upgrade setuptools

    # Start a headless X server, (for doing tests with a web browser)
    sh -e /etc/init.d/xvfb start
}

#####
# We store the coverage results for the master branch in the travis-cache
# repository. We compare current coverage test results to these store
# results, and if merging the current branch would result in a reduction
# of code test coverage, we fail the build.
#####
verify_coverage_improvement() {
    # Don't re-generate coverage if it already exists
    if [ -e ./.coverage ]; then
        echo "Found existing coverage results. Not regenerating."
    else
        if hash coverage 2> /dev/null; then
            make coverage SITE=${SITE:-noop}
        else
            echo "Coverage testing cannot proceed because the coverage command could not be found."
            echo ""
            return 1
        fi
    fi

    # Print the coverage report, get the last line containing the coverage totals,
    # and remove the "%" from the total project coverage percentage.

    # Line of coverage report consisting of the coverage total figures
    coverage_totals=$(coverage report -m | tail -n 1)

    # Total coverage percentage number with the percent sign removed
    current_coverage=$(echo $coverage_totals | awk '{print $NF}' | cut -d "%" -f 1)

    # The last line that appeared in the coverage report is the line that
    # divides the column headers and the calcuated coverage totals. This
    # means that this report is empty and there is an error in the way coverage
    # is configured.
    if [[ $coverage_totals == "-"* ]]; then
        echo "This coverage report is empty. Please check the coverage settings and try again."
        echo ""
        return 1
    fi

    master_coverage=$(__check_travis_cache coverage ${CACHE_REPO_KEY} master)

    # If this repository has no coverage information saved for the master branch...
    if [ -z "$master_coverage" ]; then
        echo "The master branch has not previously been tested for coverage."
        echo ""
        # If this is not the master branch, report that we have no value to compare
        # coverage to and exit without failing.
        if [ "$TRAVIS_BRANCH" != "master" ]; then
            echo "Coverage comparison is being skipped."
            echo "This is because the master branch has no coverage value to compare against."
            echo ""
            return
        fi
    else
        echo "master branch total coverage: $master_coverage%"
        echo "$TRAVIS_BRANCH branch total coverage: $current_coverage%"
        echo ""
        # Fail this build if coverage would decrease.
        if [ $current_coverage -lt $master_coverage ]; then
            echo "Test coverage has decreased compared to the master branch!"
            echo "This build will be failed."
            echo ""
            return 1
        fi
        echo "Coverage comparison check was successful."
        echo ""
    fi

    # Coverage has increased. If Travis reports this branch as the master
    # branch and this is not a pull request, update the coverage figure
    # stored in the cache.
    if [[ $current_coverage -gt $master_coverage &&
          "$TRAVIS_BRANCH" = "master" &&
          "$TRAVIS_PULL_REQUEST" = "false" ]]; then
        __store_travis_cache $current_coverage coverage ${CACHE_REPO_KEY} master
        echo "Coverage cache updated successfully."
        echo ""
    fi

    return
}

#####
# Perform all necessary testing
#
# This function assumes the following:
#
#	1. The app being tested has a "make reqs" target
#	2. The app being tested has a "make travis-tests" target
#	3. Either of the following are true:
#		a. The "make travis-tests" target generates .coverage
#	     or b. The app has a "make coverage" target (in this case
#                  the app's test suite will be run twice.
#
# When this function is complete, if the tests passed and coverage was
# at least the same or better, a new "travis-tested" tag will be
# pushed out to the app's repository.
#####

# Ensure all expected aspects of the nifty environment are in place,
# (git-based cache for travis test results, latest version of pip,
# Xvfb server running and correcti DISPLAY environment variable set,
# etc.)
__init_nifty_environment

tested=$(__check_travis_cache tested ${CACHE_REPO_KEY} ${TRAVIS_COMMIT} ${common_commit})

if [ -n "$tested" ]; then
    echo "This commit has previously been tested successfully. Not testing again."
    echo ""
    echo "The report from the previous run can be seen here:"
    echo ""
    echo "$tested"
    exit 0
fi

make reqs SITE=${SITE:-noop}
make travis-tests SITE=${SITE:-noop}

verify_coverage_improvement

__store_travis_cache $NIFTY_TRAVIS_JOB_URL tested ${CACHE_REPO_KEY} ${TRAVIS_COMMIT} ${common_commit}

